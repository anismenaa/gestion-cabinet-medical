const express = require('express');
const router = express.Router();
const multer = require('multer');
const PDFDocument = require("../../../models/Pdf");

// Multer storage configuration
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "./user/uploads");
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now();
    cb(null, uniqueSuffix + file.originalname);
  },
});

// Multer upload configuration
const upload = multer({ storage: storage });

// Create a new PDF document
router.post("/add", upload.single('document'), async (req, res) => {
  try {
    const { nom, description } = req.body;
    const filePath = req.file.path; // Path to the uploaded file
    console.log("The path is:", filePath);

    // Create a new PDFDocument instance
    const newPDFDocument = new PDFDocument({
      nom,
      description,
      document: filePath // Store the file path in the database
    });

    // Save the PDFDocument to the database
    const savedPDFDocument = await newPDFDocument.save();

    if (!savedPDFDocument) {
      return res.status(401).json({ message: "Une erreur s'est produite lors de l'ajout du document PDF." });
    }

    return res.status(201).json({
      PDFDocument: savedPDFDocument,
      message: "Le document PDF a été ajouté avec succès."
    });
  } catch (error) {
    console.error('Error adding PDF document:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get all PDF documents
router.get("/", async (req, res) => {
  try {
    const pdfDocuments = await PDFDocument.find();
    return res.status(200).json({ pdfDocuments, message: "Liste des documents PDF récupérée avec succès." });
  } catch (error) {
    console.error('Error fetching PDF documents:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get a single PDF document by ID
router.get("/:id", async (req, res) => {
  try {
    const pdfDocument = await PDFDocument.findById(req.params.id);
    if (!pdfDocument) {
      return res.status(404).json({ message: 'Document PDF non trouvé.' });
    }
    return res.status(200).json({ pdfDocument, message: "Document PDF récupéré avec succès." });
  } catch (error) {
    console.error('Error fetching PDF document:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update a PDF document by ID
router.put("/:id", async (req, res) => {
  try {
    const { nom, description } = req.body;
    const updatedPDFDocument = await PDFDocument.findByIdAndUpdate(req.params.id, {
      nom,
      description
    }, { new: true });

    if (!updatedPDFDocument) {
      return res.status(404).json({ message: 'Document PDF non trouvé.' });
    }

    return res.status(200).json({ updatedPDFDocument, message: "Document PDF mis à jour avec succès." });
  } catch (error) {
    console.error('Error updating PDF document:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Delete a PDF document by ID
router.delete("/:id", async (req, res) => {
  try {
    const deletedPDFDocument = await PDFDocument.findByIdAndDelete(req.params.id);

    if (!deletedPDFDocument) {
      return res.status(404).json({ message: 'Document PDF non trouvé.' });
    }

    return res.status(200).json({ message: "Document PDF supprimé avec succès." });
  } catch (error) {
    console.error('Error deleting PDF document:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

const path = require('path');
const fs = require('fs');

// Define the directory where uploaded files are stored
const uploadDir = path.join(__dirname, '../../../user/uploads');

// Route to handle file downloads
router.get("/download/:fileName", (req, res) => {
  try {
    const { fileName } = req.params;
    const filePath = path.join(uploadDir, fileName);

    // Check if the file exists
    if (fs.existsSync(filePath)) {
      // Set the appropriate headers for file download
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.setHeader('Content-Type', 'application/pdf'); // Adjust content type based on file type

      // Stream the file to the response
      const fileStream = fs.createReadStream(filePath);
      fileStream.pipe(res);
    } else {
      // If file does not exist, return a 404 response
      res.status(404).json({ message: "File not found" });
    }
  } catch (error) {
    console.error('Error downloading file:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});
module.exports = router;
